Index: prc5_chunk/client.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"io\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n)\r\n\r\nfunc main() {\r\n\t// 서버에서 파일 다운로드\r\n\tresp, err := http.Get(\"http://localhost:18888/download\")\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\t// 로컬 파일로 저장\r\n\toutFile, err := os.Create(\"downloaded_file.msi\") // 로컬에 저장할 파일 이름\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\tdefer outFile.Close()\r\n\r\n\t// 데이터 청크로 읽고 파일에 쓰면서 정보 출력\r\n\tbuffer := make([]byte, 4096) // 4KB 크기의 버퍼\r\n\ttotalBytes := 0\r\n\tfor {\r\n\t\tn, err := resp.Body.Read(buffer)\r\n\t\tif err == io.EOF {\r\n\t\t\tbreak // 파일 끝에 도달\r\n\t\t}\r\n\t\tif err != nil {\r\n\t\t\tlog.Fatal(\"Error reading chunk:\", err)\r\n\t\t}\r\n\r\n\t\t// 로컬 파일에 쓰기\r\n\t\tif _, err := outFile.Write(buffer[:n]); err != nil {\r\n\t\t\tlog.Fatal(\"Error writing to file:\", err)\r\n\t\t}\r\n\r\n\t\t// 읽은 청크 크기 로그\r\n\t\ttotalBytes += n\r\n\t\tfmt.Printf(\"Downloaded %d bytes for this chunk\\n\", n)\r\n\t}\r\n\r\n\tfmt.Printf(\"Total downloaded: %d bytes\\n\", totalBytes)\r\n\tfmt.Println(\"File downloaded successfully\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prc5_chunk/client.go b/prc5_chunk/client.go
--- a/prc5_chunk/client.go	(revision 3a492437dcbea6b29c58e408ebc1ca68edf5a5cf)
+++ b/prc5_chunk/client.go	(date 1715510554598)
@@ -3,48 +3,34 @@
 import (
 	"fmt"
 	"io"
-	"log"
-	"net/http"
+	"net"
 	"os"
 )
 
 func main() {
-	// 서버에서 파일 다운로드
-	resp, err := http.Get("http://localhost:18888/download")
+	conn, err := net.Dial("tcp", "localhost:9999")
 	if err != nil {
-		log.Fatal(err)
+		fmt.Println("Error connecting to server:", err)
+		os.Exit(1)
 	}
-	defer resp.Body.Close()
+	defer conn.Close()
 
-	// 로컬 파일로 저장
-	outFile, err := os.Create("downloaded_file.msi") // 로컬에 저장할 파일 이름
-	if err != nil {
-		log.Fatal(err)
-	}
-	defer outFile.Close()
+	var receivedData []byte
+	buf := make([]byte, 1024) // 1024 바이트 크기의 버퍼
 
-	// 데이터 청크로 읽고 파일에 쓰면서 정보 출력
-	buffer := make([]byte, 4096) // 4KB 크기의 버퍼
-	totalBytes := 0
 	for {
-		n, err := resp.Body.Read(buffer)
-		if err == io.EOF {
-			break // 파일 끝에 도달
-		}
+		n, err := conn.Read(buf)
 		if err != nil {
-			log.Fatal("Error reading chunk:", err)
-		}
-
-		// 로컬 파일에 쓰기
-		if _, err := outFile.Write(buffer[:n]); err != nil {
-			log.Fatal("Error writing to file:", err)
+			if err != io.EOF {
+				fmt.Println("Error reading from connection:", err)
+			}
+			break
 		}
+		receivedData = append(receivedData, buf[:n]...)
 
-		// 읽은 청크 크기 로그
-		totalBytes += n
-		fmt.Printf("Downloaded %d bytes for this chunk\n", n)
+		// 수신된 청크 출력
+		fmt.Printf("Received chunk: %s\n", string(buf[:n]))
 	}
 
-	fmt.Printf("Total downloaded: %d bytes\n", totalBytes)
-	fmt.Println("File downloaded successfully")
+	fmt.Println("Received message:", string(receivedData))
 }
Index: prc5_chunk/server.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"io\"\r\n\t\"net/http\"\r\n\t\"os\"\r\n\t\"time\"\r\n)\r\n\r\nfunc handlerChunkedFileDownload(w http.ResponseWriter, r *http.Request) {\r\n\tfilePath := \"./test.ttf\" // 서버에 저장된 파일 경로\r\n\tfile, err := os.Open(filePath)\r\n\tif err != nil {\r\n\t\thttp.Error(w, \"File not found.\", http.StatusNotFound)\r\n\t\treturn\r\n\t}\r\n\tdefer file.Close()\r\n\r\n\t// 클라이언트에게 파일 다운로드를 알리는 헤더 설정\r\n\tw.Header().Set(\"Content-Type\", \"application/octet-stream\")\r\n\tw.Header().Set(\"Content-Disposition\", \"attachment; filename=\\\"\"+file.Name()+\"\\\"\")\r\n\tw.Header().Set(\"Transfer-Encoding\", \"chunked\")\r\n\r\n\t// 파일을 청크로 나누어 전송\r\n\tbuffer := make([]byte, 8192) // 4KB 크기의 버퍼\r\n\tfor {\r\n\t\tn, err := file.Read(buffer)\r\n\t\tif err == io.EOF {\r\n\t\t\tbreak // 파일 끝에 도달\r\n\t\t}\r\n\t\tif err != nil {\r\n\t\t\thttp.Error(w, \"Error reading file.\", http.StatusInternalServerError)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// 버퍼의 내용을 응답으로 작성\r\n\t\tw.Write(buffer[:n])\r\n\t\tflusher, _ := w.(http.Flusher)\r\n\t\tflusher.Flush()                  // 클라이언트로 청크 전송\r\n\t\ttime.Sleep(1 * time.Millisecond) // 청크 사이의 지연 시간 (필요에 따라 조절)\r\n\t}\r\n}\r\n\r\nfunc main() {\r\n\thttp.HandleFunc(\"/download\", handlerChunkedFileDownload)\r\n\thttp.ListenAndServe(\":18888\", nil)\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/prc5_chunk/server.go b/prc5_chunk/server.go
--- a/prc5_chunk/server.go	(revision 3a492437dcbea6b29c58e408ebc1ca68edf5a5cf)
+++ b/prc5_chunk/server.go	(date 1715510566733)
@@ -1,47 +1,50 @@
 package main
 
 import (
-	"io"
-	"net/http"
+	"fmt"
+	"net"
 	"os"
-	"time"
 )
 
-func handlerChunkedFileDownload(w http.ResponseWriter, r *http.Request) {
-	filePath := "./test.ttf" // 서버에 저장된 파일 경로
-	file, err := os.Open(filePath)
+func main() {
+	listener, err := net.Listen("tcp", "localhost:9999")
 	if err != nil {
-		http.Error(w, "File not found.", http.StatusNotFound)
-		return
+		fmt.Println("Error creating listener:", err)
+		os.Exit(1)
 	}
-	defer file.Close()
+	defer listener.Close()
+	fmt.Println("Server is listening on localhost:9999")
 
-	// 클라이언트에게 파일 다운로드를 알리는 헤더 설정
-	w.Header().Set("Content-Type", "application/octet-stream")
-	w.Header().Set("Content-Disposition", "attachment; filename=\""+file.Name()+"\"")
-	w.Header().Set("Transfer-Encoding", "chunked")
-
-	// 파일을 청크로 나누어 전송
-	buffer := make([]byte, 8192) // 4KB 크기의 버퍼
 	for {
-		n, err := file.Read(buffer)
-		if err == io.EOF {
-			break // 파일 끝에 도달
+		conn, err := listener.Accept()
+		if err != nil {
+			fmt.Println("Error accepting connection:", err)
+			continue
 		}
+		go handleConnection(conn)
+	}
+}
+
+func handleConnection(conn net.Conn) {
+	defer conn.Close()
+
+	// 전송할 전체 데이터
+	msg := "Hello from server. This data will be sent in chunks. Each chunk has its own part of the whole message."
+	data := []byte(msg)
+
+	// 청크 사이즈 정의
+	chunkSize := 5
+
+	// 데이터를 청크로 나누어 전송
+	for i := 0; i < len(data); i += chunkSize {
+		end := i + chunkSize
+		if end > len(data) {
+			end = len(data)
+		}
+		_, err := conn.Write(data[i:end])
 		if err != nil {
-			http.Error(w, "Error reading file.", http.StatusInternalServerError)
+			fmt.Println("Error writing to connection:", err)
 			return
 		}
-
-		// 버퍼의 내용을 응답으로 작성
-		w.Write(buffer[:n])
-		flusher, _ := w.(http.Flusher)
-		flusher.Flush()                  // 클라이언트로 청크 전송
-		time.Sleep(1 * time.Millisecond) // 청크 사이의 지연 시간 (필요에 따라 조절)
 	}
 }
-
-func main() {
-	http.HandleFunc("/download", handlerChunkedFileDownload)
-	http.ListenAndServe(":18888", nil)
-}
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 3a492437dcbea6b29c58e408ebc1ca68edf5a5cf)
+++ /dev/null	(revision 3a492437dcbea6b29c58e408ebc1ca68edf5a5cf)
@@ -1,8 +0,0 @@
-# 디폴트 무시된 파일
-/shelf/
-/workspace.xml
-# 에디터 기반 HTTP 클라이언트 요청
-/httpRequests/
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
Index: .idea/network.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module version=\"4\">\r\n  <component name=\"Go\" enabled=\"true\" />\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/network.iml b/.idea/network.iml
--- a/.idea/network.iml	(revision 3a492437dcbea6b29c58e408ebc1ca68edf5a5cf)
+++ b/.idea/network.iml	(date 1715510327654)
@@ -1,4 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module version="4">
+<module type="JAVA_MODULE" version="4">
   <component name="Go" enabled="true" />
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
 </module>
\ No newline at end of file
